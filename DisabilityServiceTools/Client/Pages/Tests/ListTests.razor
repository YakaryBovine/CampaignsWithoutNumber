@page "/listtests"
@using DisabilityServiceTools.Shared.Models
@using DisabilityServiceTools.Shared.RequestFeatures
@using DisabilityServiceTools.Client.Repositories
@using Microsoft.AspNetCore.Components;
@using MudBlazor;
@using System.Threading.Tasks;

<MudTooltip Text="Create Test">
    <MudLink Href="/createTest">
        <MudFab Icon="@Icons.Filled.Add" Color="Color.Secondary" Size="Size.Large" />
    </MudLink>
</MudTooltip>

<MudTable ServerData="@(new Func<TableState, Task<TableData<Test>>>(GetServerData))"
          Hover="true" Breakpoint="Breakpoint.Sm" RightAlignSmall="true"
          @ref="_table" RowsPerPage="25">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Tests</MudText>
        <MudSpacer />
        <MudTextField OnDebounceIntervalElapsed="OnSearch" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small"
                      Class="mt-0" T="string" DebounceInterval="500"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="firstname" T="Test">First Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="surname" T="Test">Surname</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Course">
            <MudLink Href="@($"testdetails/{context.Id}")">@context.Course.Code</MudLink>
        </MudTd>
        <MudTd DataLabel="Date">@context.DateTime</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="@_pageSizeOption" RowsPerPageString="Tests per page" />
    </PagerContent>
</MudTable>

@code {
  private MudTable<Test> _table;
  private TestParameters _studentParameters = new TestParameters();
  private readonly int[] _pageSizeOption = { 25, 50, 100 };

  [Inject]
  public ITestClientRepository Repository { get; set; }

  private async Task<TableData<Test>> GetServerData(TableState state)
  {
    _studentParameters.PageSize = state.PageSize;
    _studentParameters.PageNumber = state.Page + 1;

    _studentParameters.OrderBy = state.SortDirection == SortDirection.Descending ?
        state.SortLabel + " desc" :
        state.SortLabel;

    var response = await Repository.GetTests(_studentParameters);

    return new TableData<Test>
    {
      Items = response.Items,
      TotalItems = response.MetaData.TotalCount
    };
  }

  private void OnSearch(string searchTerm)
  {
    _studentParameters.SearchTerm = searchTerm;
    _table.ReloadServerData();
  }
} 