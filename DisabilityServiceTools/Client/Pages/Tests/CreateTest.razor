@page "/createTest"
@using DisabilityServiceTools.Shared.Models
@using DisabilityServiceTools.Client.Repositories

<section style="width:600px; margin: 0 auto;">
    <EditForm Model="_test" OnValidSubmit="Create">
        <DataAnnotationsValidator />
        <MudCard>
            <MudCardContent>
                <MudTextField Label="Course" @bind-Value="_test.CourseId"
                              For="@(() => _test.CourseId)" />
                <MudDatePicker Label="Date" @bind-Date="_test.DateTime"
                               For="@(() => _test.DateTime)" />
                <MudTextField Label="Duration" @bind-Value="_test.Duration"
                              For="@(() => _test.Duration)" />
                <MudAutocomplete T="string" Label="US States" @bind-Value="value2" SearchFunc="@Search2"
                                 ResetValueOnEmptyText="@resetValueOnEmptyText"
                                 CoerceText="@coerceText" CoerceValue="@coerceValue"
                                 AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary"
                           Class="ml-auto">Create Test</MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
</section>

@code {
  private Test _test = new Test();
  private DateTime? _date = DateTime.Today;
  private bool resetValueOnEmptyText;
  private bool coerceText;
  private bool coerceValue;
  private string value1, value2;
  private string[] states =
{
        "Alabama", "Alaska", "American Samoa", "Arizona",
        "Arkansas", "California", "Colorado", "Connecticut",
        "Delaware", "District of Columbia", "Federated States of Micronesia",
        "Florida", "Georgia", "Guam", "Hawaii", "Idaho",
        "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky",
        "Louisiana", "Maine", "Marshall Islands", "Maryland",
        "Massachusetts", "Michigan", "Minnesota", "Mississippi",
        "Missouri", "Montana", "Nebraska", "Nevada",
        "New Hampshire", "New Jersey", "New Mexico", "New York",
        "North Carolina", "North Dakota", "Northern Mariana Islands", "Ohio",
        "Oklahoma", "Oregon", "Palau", "Pennsylvania", "Puerto Rico",
        "Rhode Island", "South Carolina", "South Dakota", "Tennessee",
        "Texas", "Utah", "Vermont", "Virgin Island", "Virginia",
        "Washington", "West Virginia", "Wisconsin", "Wyoming",
    };

  [Inject]
  public ITestClientRepository Repository { get; set; }
  private async Task Create()
  {
      _test.DateTime = (DateTime)_date;
      await Repository.CreateTest(_test);
  }

  private async Task<IEnumerable<string>> Search2(string value)
  {
      // In real life use an asynchronous function for fetching data from an api.
      await Task.Delay(5);

      // if text is null or empty, don't return values (drop-down will not open)
      if (string.IsNullOrEmpty(value))
          return new string[0];
      return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
  }
} 