@page "/liststudents"
@using DisabilityServiceTools.Shared.Models
@using DisabilityServiceTools.Shared.RequestFeatures
@using DisabilityServiceTools.Client.Repositories
@using Microsoft.AspNetCore.Components;
@using MudBlazor;
@using System.Threading.Tasks;

<MudTooltip Text="Create Student">
    <MudLink Href="/createStudent">
        <MudFab Icon="@Icons.Filled.Add" Color="Color.Secondary" Size="Size.Large" />
    </MudLink>
</MudTooltip>

<MudTable ServerData="@(new Func<TableState, Task<TableData<Student>>>(GetServerData))"
          Hover="true" Breakpoint="Breakpoint.Sm" RightAlignSmall="true"
          @ref="_table" RowsPerPage="25"
          FixedHeader="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Students</MudText>
        <MudSpacer />
        <MudTextField OnDebounceIntervalElapsed="OnSearch" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small"
                      Class="mt-0" T="string" DebounceInterval="500"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="studentid" T="Student"><b>Student ID</b></MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="firstname" T="Student"><b>First Name</b></MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="surname" T="Student"><b>Surname</b></MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Student ID">
            <MudLink Href="@($"studentdetails/{context.Id}")">@context.StudentId</MudLink>
        </MudTd>
        <MudTd DataLabel="First Name">@context.FirstName</MudTd>
        <MudTd DataLabel="Surname">@context.Surname</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="@_pageSizeOption" RowsPerPageString="Students per page" />
    </PagerContent>
</MudTable>

@code {
    private MudTable<Student> _table;
    private StudentParameters _studentParameters = new StudentParameters();
    private readonly int[] _pageSizeOption = { 25, 50, 100 };

    [Inject]
    public IStudentClientRepository Repository { get; set; }

    private async Task<TableData<Student>> GetServerData(TableState state)
    {
        _studentParameters.PageSize = state.PageSize;
        _studentParameters.PageNumber = state.Page + 1;

        _studentParameters.OrderBy = state.SortDirection == SortDirection.Descending ?
            state.SortLabel + " desc" :
            state.SortLabel;

        var response = await Repository.GetStudents(_studentParameters);

        return new TableData<Student>
        {
            Items = response.Items,
            TotalItems = response.MetaData.TotalCount
        };
    }

    private void OnSearch(string searchTerm)
    {
        _studentParameters.SearchTerm = searchTerm;
        _table.ReloadServerData();
    }
} 