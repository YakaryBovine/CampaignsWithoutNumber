@page "/createStudent"
@using DisabilityServiceTools.Shared.Models
@using DisabilityServiceTools.Client.Repositories

<section style="width:600px; margin: 0 auto;">
    <EditForm Model="_student" OnValidSubmit="Create">
        <DataAnnotationsValidator />
        <MudCard>
            <MudCardContent>
                <MudTextField Label="First Name" @bind-Value="_student.FirstName"
                              For="@(() => _student.FirstName)" />
                <MudTextField Label="Surname" @bind-Value="_student.Surname"
                              For="@(() => _student.Surname)" />
                <MudTextField Label="Student ID" @bind-Value="_student.StudentId"
                              For="@(() => _student.StudentId)" />
            </MudCardContent>
            <MudCardActions>
              <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled"
                         Link="/liststudents"
                         Class="ml-auto">Cancel</MudButton>
              <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary"
                         Class="ml-auto">Create Student</MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
</section>

@code {
  private Student _student = new Student();

  [Inject]
  public IStudentClientRepository Repository { get; set; }
  [Inject]
  public IDialogService Dialog { get; set; }
  [Inject]
  public NavigationManager NavManager { get; set; }

  private async Task Create()
  {
      await Repository.Create(_student);
      await ExecuteDialog();
  }

  private async Task ExecuteDialog()
  {
      var parameters = new DialogParameters
        {
            { "Content", "Student successfuly created." },
            { "ButtonColor", Color.Primary },
            { "ButtonText", "OK" }
        };
      var dialog = Dialog.Show<DialogNotification>("Success", parameters);
      var result = await dialog.Result;
      if (!result.Cancelled)
      {
          bool.TryParse(result.Data.ToString(), out bool shouldNavigate);
          if (shouldNavigate)
              NavManager.NavigateTo("/liststudents");
      }
  }
} 