@page "/character"
@using Microsoft.AspNetCore.Components
@using CampaignsWithoutNumber.Shared.Models
@using System.Threading

@inject HttpClient _http
<h1>Character Component</h1>
<br/>
<div>
    <div style="float:right; margin-bottom:5px">
        <button class="btn btn-primary" @onclick="@AddCharacter">Add Character</button>
    </div>
</div>
<br/>
@if (CharacterList == null)
{
    <p>
        <em>Loading...</em>
    </p>
    <br/>
}
else
{
    <table class='table'>
        <thead>
        <tr>
            <th>Name</th>
            <th>Item</th>
            <th>Price</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var character in CharacterList)
        {
            <tr>
                <td>@character.Name</td>
                <td>@character.Name</td>
                <td>@character.Name</td>
                <td>
                    <button class="btn btn-info" @onclick="@(async () => await EditCharacter(@character.Id))">Edit</button>
                    <button class="btn btn-danger" @onclick="@(async () => await DeleteConfirmation(character.Id))">Delete</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
    if (IsAdd)
    {
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title">@ModalTitle</h3>
                        <button type="button" class="close" @onclick="@CloseModal">
                            <span aria-hidden="true">x</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <form>
                            <div class="form-group">
                                <label for="Name" class="control-label">Name</label>
                                <input for="Name" class="form-control" @bind="@Character.Name"/>
                            </div>
                            <div class="form-group">
                                <label for="Price" class="control-label">Price</label>
                                <input for="Price" class="form-control" @bind="@Character.Name"/>
                            </div>
                            <div class="form-group">
                                <label asp-for="Item" class="control-label">Item</label>
                                <select asp-for="Item" class="form-control" @bind="@Character.Name">
                                    <option value="">-- Select Item --</option>
                                    @foreach (var item in ItemList)
                                    {
                                        <option value="@item.Name">@item.Name</option>
                                    }
                                </select>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-block btn-success" @onclick="@(async () => await SaveCharacter())" data-dismiss="modal">Save</button>
                    </div>
                </div>
            </div>
        </div>
    }
    if (IsDelete)
    {
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title">@ModalTitle</h3>
                    </div>
                    <div class="modal-body">
                        <h4>Do you confirm delete this character?</h4>
                        <table class="table">
                            <tr>
                                <td>Name</td>
                                <td>@Character.Name</td>
                            </tr>
                            <tr>
                                <td>Item</td>
                                <td>@Character.Name</td>
                            </tr>
                            <tr>
                                <td>Price</td>
                                <td>@Character.Name</td>
                            </tr>
                        </table>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-danger" @onclick="@(async () => await DeleteCharacter(Character.Id))" data-dismiss="modal">Confirm</button>
                        <button class="btn btn-warning" @onclick="@CloseModal">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    }
}

@code{
    protected string ModalTitle { get; set; }
    protected List<Character> CharacterList;
    protected List<Item> ItemList;
    protected Character Character = new();
    protected bool IsDelete;
    protected bool IsAdd;

    protected async Task GetCharacters()
    {
        CharacterList = await _http.GetFromJsonAsync<List<Character>>("api/character/getcharacters");
    }

    protected async Task GetCategories()
    {
        ItemList = await _http.GetFromJsonAsync<List<Item>>("/api/character/getitems/");
    }

    protected async Task AddCharacter()
    {
        Character = new Character();
        ModalTitle = "Add Character";
        IsAdd = true;
        await GetCategories().ConfigureAwait(false);
    }

    protected async Task EditCharacter(string id)
    {
        Character = await _http.GetFromJsonAsync<Character>("api/character/details/" + id);
        ModalTitle = "Edit Character";
        IsAdd = true;
        await GetCategories().ConfigureAwait(false);
    }

    protected async Task SaveCharacter()
    {
        if (Character.Id != null)
        {
            await HttpClientJsonExtensions.PostAsJsonAsync(_http, "api/character/edit", Character, new CancellationToken());
        }
        else
        {
            await HttpClientJsonExtensions.PostAsJsonAsync(_http, "api/character/create", Character, new CancellationToken());
        }
        IsAdd = false;
        await GetCharacters();
    }

    protected async Task DeleteConfirmation(string id)
    {
        ModalTitle = "Delete Character";
        Character = await _http.GetFromJsonAsync<Character>("/api/character/details/" + id);
        IsDelete = true;
    }

    protected async Task DeleteCharacter(string id)
    {
        await _http.DeleteAsync("api/character/delete/" + id);
        IsDelete = false;
        await GetCharacters();
    }

    protected void CloseModal()
    {
        IsAdd = false;
        IsDelete = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await GetCategories();
        await GetCharacters();
    }

}